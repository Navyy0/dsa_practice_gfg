//{ Driver Code Starts
// Initial Template for Java
import java.util.*;


// } Driver Code Ends
// User function Template for Java

class Solution {
    
 
    private void dfs(ArrayList<ArrayList<Integer>> transpose, int node, boolean[] vis, ArrayList<Integer> component) {
        vis[node] = true;
        component.add(node);

        for (int neighbor : transpose.get(node)) {
            if (!vis[neighbor]) {
                dfs(transpose, neighbor, vis, component);
            }
        }
    }

    private void topSort(ArrayList<ArrayList<Integer>> adj, int node, boolean[] vis, Stack<Integer> s) {
        vis[node] = true;
        for (int neighbor : adj.get(node)) {
            if (!vis[neighbor]) {
                topSort(adj, neighbor, vis, s);
            }
        }
        s.push(node);
    }

    // Function to find number of strongly connected components in the graph.
    public int kosaraju(ArrayList<ArrayList<Integer>> adj) {
        int V = adj.size();
        Stack<Integer> s = new Stack<>();
        boolean[] vis = new boolean[V];

        // Step 1: Perform topological sorting
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                topSort(adj, i, vis, s);
            }
        }

        // Step 2: Create transpose of the graph
        ArrayList<ArrayList<Integer>> transpose = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            transpose.add(new ArrayList<>());
        }

        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                transpose.get(neighbor).add(i);
            }
        }

        // Step 3: Perform DFS on the transposed graph
        Arrays.fill(vis, false);
        int sccCount = 0;

        while (!s.isEmpty()) {
            int curr = s.pop();
            if (!vis[curr]) {
                ArrayList<Integer> component = new ArrayList<>();
                dfs(transpose, curr, vis, component);
                sccCount++;
            }
        }

        return sccCount;
    }
}

//{ Driver Code Starts.

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int V = sc.nextInt();
            int E = sc.nextInt();

            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) {
                adj.add(new ArrayList<>());
            }

            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                adj.get(u).add(v);
            }

            Solution obj = new Solution();
            System.out.println(obj.kosaraju(adj));

            System.out.println("~");
        }
        sc.close();
    }
}

// } Driver Code Ends
