//{ Driver Code Starts


import java.io.*;
import java.lang.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static PrintWriter ot;

    public static void main(String args[]) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        ot = new PrintWriter(System.out);
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            int V = Integer.parseInt(br.readLine().trim());
            int E = Integer.parseInt(br.readLine().trim());
            List<List<int[]>> list = new ArrayList<>();
            for (int i = 0; i < V; i++) list.add(new ArrayList<>());
            for (int i = 0; i < E; i++) {
                String[] s = br.readLine().trim().split(" ");
                int a = Integer.parseInt(s[0]);
                int b = Integer.parseInt(s[1]);
                int c = Integer.parseInt(s[2]);
                list.get(a).add(new int[] {b, c});
                list.get(b).add(new int[] {a, c});
            }
            ot.println(new Solution().spanningTree(V, E, list));

            ot.println("~");
        }
        ot.close();
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    static class Pair implements Comparable<Pair> {
        int v, cost;
        
        public Pair(int v, int cost) {
            this.v = v;
            this.cost = cost;
        }
        
        @Override
        public int compareTo(Pair p2) {
            return this.cost - p2.cost;
        }
    }
    
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        boolean[] vis = new boolean[V];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(0, 0));
        int finalCost = 0;
        
        while (!pq.isEmpty()) {
            Pair curr = pq.poll();
            if (!vis[curr.v]){
                vis[curr.v] = true;
            finalCost += curr.cost;
            
            for (int[] neighbour : adj.get(curr.v)) {
                int nextNode = neighbour[0];
                int edgeWeight = neighbour[1];
                
                if (!vis[nextNode]) {
                    pq.add(new Pair(nextNode, edgeWeight));
                }
            }
            } 
            
        }
        return finalCost;
        
    }
}
