//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);
        
        return a;
    }
    
    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
    
    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int N; 
            N = Integer.parseInt(br.readLine());
            
            
            int[] S = IntArray.input(br, N);
            
            
            int[] F = IntArray.input(br, N);
            
            Solution obj = new Solution();
            ArrayList<Integer> res = obj.maxMeetings(N, S, F);
            
            IntArray.print(res);
            
        
System.out.println("~");
}
    }
}

// } Driver Code Ends


class Solution {
    static class Meeting implements Comparable<Meeting> {  // Make Meeting static
        int start;
        int end;
        int index;

        Meeting(int start, int end, int index) {
            this.start = start;
            this.end = end;
            this.index = index;
        }

        @Override
        public int compareTo(Meeting other) {
            return Integer.compare(this.end, other.end);
        }
    }

    public static ArrayList<Integer> maximumMeetings(List<Meeting> meetings) {
        if (meetings.isEmpty()) return new ArrayList<>();

        Collections.sort(meetings); // Sort meetings by end time

        ArrayList<Integer> selectedMeetings = new ArrayList<>();
        int endTime = meetings.get(0).end;
        selectedMeetings.add(meetings.get(0).index);

        for (int i = 1; i < meetings.size(); i++) {
            if (meetings.get(i).start > endTime) {
                endTime = meetings.get(i).end;
                selectedMeetings.add(meetings.get(i).index);
            }
        }

        // Sort the selected indices to return in increasing order
        Collections.sort(selectedMeetings);
        return selectedMeetings;
    }

    public static ArrayList<Integer> maxMeetings(int N, int[] S, int[] F) {
        List<Meeting> meetings = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            meetings.add(new Meeting(S[i], F[i], i + 1));
        }

        return maximumMeetings(meetings);
    }
}
        
