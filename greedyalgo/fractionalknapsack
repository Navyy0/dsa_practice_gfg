//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GfG {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            // Read values array
            String[] valueInput = br.readLine().trim().split(" ");
            List<Integer> values = new ArrayList<>();
            for (String s : valueInput) {
                values.add(Integer.parseInt(s));
            }

            // Read weights array
            String[] weightInput = br.readLine().trim().split(" ");
            List<Integer> weights = new ArrayList<>();
            for (String s : weightInput) {
                weights.add(Integer.parseInt(s));
            }

            // Read the knapsack capacity
            int w = Integer.parseInt(br.readLine().trim());

            // Call fractionalKnapsack function and print result
            System.out.println(String.format(
                "%.6f", new Solution().fractionalKnapsack(values, weights, w)));
            System.out.println("~");
        }
    }
}

// } Driver Code Ends


// User function Template for Java
class Solution {
    // Function to get the maximum total value in the knapsack.
    class Item implements Comparable<Item> {
        int profit;
        int weight;

        Item(int profit, int weight) {
            this.profit = profit;
            this.weight = weight;
        }

        @Override
        public int compareTo(Item other) {
            double ratio1 = (double) this.profit / this.weight;
            double ratio2 = (double) other.profit / other.weight;
            return Double.compare(ratio2, ratio1);
        }
    }

    public static double fractionalKnap(int capacity, ArrayList<Item> items) {
        double totalProfit = 0.0;
        for (Item item : items) {
            if (capacity <= 0)
                break;

            if (item.weight <= capacity) {
                totalProfit += item.profit;
                capacity -= item.weight;
            } else {
                double fraction = (double) capacity / item.weight;
                totalProfit += fraction * item.profit;
                capacity = 0;
            }
        }
        return totalProfit;
    }

    double fractionalKnapsack(List<Integer> val, List<Integer> wt, int capacity) {
        // Convert values and weights into Item objects
        ArrayList<Item> items = new ArrayList<>();
        for (int i = 0; i < val.size(); i++) {
            items.add(new Item(val.get(i), wt.get(i)));
        }
        
        // Sort items by profit/weight ratio
        Collections.sort(items);

        // Calculate the maximum profit
        return fractionalKnap(capacity, items);
    }
}
