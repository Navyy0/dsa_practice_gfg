class Solution {
    // Function to flatten a linked list
    public static Node merge(Node list1, Node list2) {
        // Create a dummy node as a placeholder for the result
        Node dummyNode = new Node(-1);
        Node res = dummyNode;

        // Merge the lists based on data values
        while (list1 != null && list2 != null) {
            if (list1.data < list2.data) {
                res.bottom = list1;
                res = list1;
                list1 = list1.bottom;
            } else {
                res.bottom = list2;
                res = list2;
                list2 = list2.bottom;
            }
        }

        // Connect the remaining elements if any
        if (list1 != null) {
            res.bottom = list1;
        } else {
            res.bottom = list2;
        }

        return dummyNode.bottom;
    }

    Node flatten(Node root) {
        // Base case: if no node or single node, return it
        if (root == null || root.next == null) {
            return root;
        }

        // Recursively flatten the rest of the linked list
        root.next = flatten(root.next);

        // Merge the current node with the already flattened list
        root = merge(root, root.next);

        return root;
    }
}
