/*Complete The Function Provided
Given Below is The Node Of Tree
class Node
{
    int data;
    Node left, right;
    public Node(int data)
    {
        this.data = data;
         left = right = null;
    }
}*/

class Solution {
    static class Pair {
    Node node;
    int hd; // Horizontal Distance

     Pair(Node node, int hd) {
        this.node = node;
        this.hd = hd;
    }
}
    // Function to return list containing elements of right view of binary tree.
    ArrayList<Integer> rightView(Node root) {
        // add code here.
           // code here
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Map<Integer, Integer> map = new TreeMap<>(); // Stores HD -> Node data
        Queue<Pair> queue = new LinkedList<>();

        queue.add(new Pair(root, 0));

        while (!queue.isEmpty()) {
            Pair temp = queue.poll();
            Node node = temp.node;
            int hd = temp.hd;

            // Store first node at each horizontal distance
            
                map.put(hd, node.data);
            

            if (node.left != null) queue.add(new Pair(node.left, hd + 1));
            if (node.right != null) queue.add(new Pair(node.right, hd + 1));
        }

        // Collecting values in order of horizontal distance
        for (int value : map.values()) {
            result.add(value);
        }

        return result;
    }
}
