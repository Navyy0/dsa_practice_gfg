/* A Binary Tree node
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/
class Solution {
    public static class Pair{
        Node node;
        int ds;
        Pair(Node node, int ds){
            this.node = node;
            this.ds = ds;
        }
    }
    // Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root) {
        // code here
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null) return new ArrayList<>();
        Queue<Pair> q = new LinkedList<>();
        
        Map<Integer , Integer> d = new HashMap<>();
        
        q.add(new Pair(root , 0));
        
        while(!q.isEmpty()){
            Pair temp = q.poll();
            Node node = temp.node;
            int ds = temp.ds;
            
            if(!d.containsKey(ds)){
                d.put(ds , node.data);
            }
            
            if(node.left != null){
                q.add(new Pair(node.left , ds+1));
            
            }
            if(node.right != null){
                q.add(new Pair(node.right , ds+1));
            }
        }
        
        for(int val : d.values()){
            result.add(val);
        }
        return result;
        
    }
}
