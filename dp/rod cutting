//{ Driver Code Starts
import java.io.*;
import java.util.*;

class RodCutting {

    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);

        int t = Integer.parseInt(in.readLine().trim());
        while (t-- > 0) {
            String s[] = in.readLine().trim().split(" ");
            int[] arr = new int[s.length];
            for (int i = 0; i < s.length; i++) arr[i] = Integer.parseInt(s[i]);

            Solution ob = new Solution();
            out.println(ob.cutRod(arr));

            out.println("~");
        }
        out.close();
    }
}

// } Driver Code Ends


class Solution {
    public int cutRod(int[] price) {
        // code here
            int n = price.length;
            int capacity = price.length;
        int dp[][] = new int[n+1][capacity+1];

        for(int i = 0; i <= n; i++){
            for(int j = 0; j <= capacity; j++){
                if(i == 0 || j == 0) {
                    dp[i][j] = 0; // Base case
                } else {
                    int v = price[i-1];
                    int w = i;  // Corrected index
                    if(w <= j){
                        int incluprofit = v + dp[i][j-w];
                        int notincluprofit = dp[i-1][j];
                        dp[i][j] = Math.max(incluprofit, notincluprofit);
                    } else {
                        dp[i][j] = dp[i-1][j];
                    }
                }
            }
        }
        return dp[n][capacity];
    }
}
